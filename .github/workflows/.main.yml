on:
  push:
    branches:
      - "main"
name: Build Image
jobs:
  jobName:
    name: Update deploy
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          export IMAGE_TAG=$(cat VERSION)
          export SHORT_SHA=$(echo $GITHUB_SHA | cut -c1-7)
          ECR_REPOSITORY=$(cat project.mk | grep ECR_REPOSITORY | cut -d'=' -f2)
          ECR_REPOSITORY=$(echo $ECR_REPOSITORY | cut -d' ' -f1)
          docker buildx build --platform linux/amd64 \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA \
            -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$SHORT_SHA
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest

      - name: Set outputs for kubernetes deployment
        id: set-k8s-outputs
        run: |
          export K8S_NAMESPACE=$(cat project.mk | grep K8S_NAMESPACE_DEV | cut -d'=' -f2)
          export K8S_DEPLOYMENT=$(cat project.mk | grep K8S_DEPLOYMENT_DEV | cut -d'=' -f2)
          echo "::set-output name=K8S_NAMESPACE::$K8S_NAMESPACE"
          echo "::set-output name=K8S_DEPLOYMENT::$K8S_DEPLOYMENT"

      - name: Rollout deployment
        uses: ianbelcher/eks-kubectl-action@master
        with:
          aws_access_key_id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_access_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws_region: us-east-2
          cluster_name: production
          args: rollout restart deployment ${{ steps.set-k8s-outputs.outputs.K8S_DEPLOYMENT }} -n ${{ steps.set-k8s-outputs.outputs.K8S_NAMESPACE }}
